// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: "learn01.gradle"
buildscript {
    ext.kotlin_version = '1.3.50'
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }

    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}


println "myTask03 project name ${this.name},project=${this}"

allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/central' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }
}

/**
 * 根据官方文档的描述 allprojects/subprojects 这两个方法的闭包 的delegate属性都会依次替换设置为 目标project，用以确保闭包是在
 * 依次在各个 目标project中执行的.
 * 在gradle的配置阶段,(1)先执行Root project的配置代码，然后依次按照setting.gradle中include的顺序.依次执行子project的配置代码
 *  allprojects/subprojects 这两个方法的闭包 实在配置阶段执行的。
 */
subprojects {
    //所以这里的代码就是在目标project中执行了.我们使用Project类中的属性时,这些属性就是 目标project对应的值了。
    //implementation()方法是在 application插件中的，因此要进行插件应用才可以调用该方法
    //
    apply plugin: 'com.android.application'
    def contains = name.contains("app")
    dependencies {
        if (!contains) {
            implementation "io.reactivex.rxjava2:rxjava:2.2.0"
            implementation "io.reactivex.rxjava2:rxandroid:2.0.2"
        }

        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

        implementation 'androidx.appcompat:appcompat:1.1.0'
        implementation 'androidx.core:core-ktx:1.2.0'
        implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    }
}